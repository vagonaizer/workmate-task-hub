package logger

import (
	"fmt"
	"log"
	"os"
	"runtime"
	"time"
)

// emojiMap ‚Äî —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
var emojiMap = map[string]string{
	"DEBUG": "üêõ",
	"INFO":  "‚ÑπÔ∏è",
	"WARN":  "‚ö†Ô∏è",
	"ERROR": "‚ùå",
}

// colorMap ‚Äî —Ü–≤–µ—Ç–æ–≤—ã–µ escape-–∫–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π.
var colorMap = map[string]string{
	"DEBUG": "\033[36m", // cyan
	"INFO":  "\033[32m", // green
	"WARN":  "\033[33m", // yellow
	"ERROR": "\033[31m", // red
}

const colorReset = "\033[0m"

type Logger struct {
	logger *log.Logger
}

// NewLogger ‚Äî –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ª–æ–≥–≥–µ—Ä–∞.
func NewLogger() *Logger {
	return &Logger{
		logger: log.New(os.Stdout, "", 0),
	}
}

// logf ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–∞.
func (l *Logger) logf(level string, format string, v ...interface{}) {
	_, file, line, ok := runtime.Caller(2)
	if !ok {
		file = "???"
		line = 0
	}
	shortFile := file
	if idx := len(file) - 1; idx >= 0 {
		for i := len(file) - 1; i >= 0; i-- {
			if file[i] == '/' {
				shortFile = file[i+1:]
				break
			}
		}
	}
	emoji := emojiMap[level]
	color := colorMap[level]
	timestamp := time.Now().Format("2006-01-02 15:04:05")
	msg := fmt.Sprintf(format, v...)
	l.logger.Printf("%s%s [%s] %s %s:%d | %s%s", color, emoji, level, timestamp, shortFile, line, msg, colorReset)
}

// Debug ‚Äî –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ debug.
func (l *Logger) Debug(format string, v ...interface{}) {
	l.logf("DEBUG", format, v...)
}

// Info ‚Äî –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ info.
func (l *Logger) Info(format string, v ...interface{}) {
	l.logf("INFO", format, v...)
}

// Warn ‚Äî –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ warn.
func (l *Logger) Warn(format string, v ...interface{}) {
	l.logf("WARN", format, v...)
}

// Error ‚Äî –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ error.
func (l *Logger) Error(format string, v ...interface{}) {
	l.logf("ERROR", format, v...)
}

// Sync ‚Äî –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å zap, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç.
func (l *Logger) Sync() error { return nil }
